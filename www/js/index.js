// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('deviceready', onDeviceReady, false);

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof cordova === 'undefined') {
    window.addEventListener('load', function() {
        setTimeout(onDeviceReady, 500);
    });
}

let messageHistory = [];
let theme = 'default';
let isSending = false;
let currentModel = CONFIG.MODEL;

function onDeviceReady() {
    // –°–∫—Ä—ã–≤–∞–µ–º splash screen –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (navigator.splashscreen) {
        navigator.splashscreen.hide();
    }
    
    loadModel();
    initTheme();
    initModelSelector();
    loadHistory();
    renderMessages();
    initEventListeners();
}

function loadModel() {
    const saved = localStorage.getItem('selectedModel');
    if (saved && CONFIG.AVAILABLE_MODELS.find(m => m.id === saved)) {
        currentModel = saved;
    }
    updateModelDisplay();
}

function initModelSelector() {
    const dropdown = document.getElementById('modelDropdown');
    const modelBtn = document.getElementById('modelBtn');
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
    CONFIG.AVAILABLE_MODELS.forEach(model => {
        const option = document.createElement('div');
        option.className = 'model-option';
        if (model.id === currentModel) {
            option.classList.add('active');
        }
        
        option.innerHTML = `
            <div class="model-option-name">${model.name}</div>
            <div class="model-option-desc">${model.description}</div>
        `;
        
        option.addEventListener('click', () => {
            currentModel = model.id;
            localStorage.setItem('selectedModel', currentModel);
            updateModelDisplay();
            closeModelDropdown();
        });
        
        dropdown.appendChild(option);
    });
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ dropdown
    modelBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleModelDropdown();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', () => {
        closeModelDropdown();
    });
}

function updateModelDisplay() {
    const model = CONFIG.AVAILABLE_MODELS.find(m => m.id === currentModel);
    if (model) {
        document.getElementById('currentModelName').textContent = model.name;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ü–∏—é –≤ dropdown
    document.querySelectorAll('.model-option').forEach(opt => {
        opt.classList.remove('active');
        const modelName = opt.querySelector('.model-option-name').textContent;
        const model = CONFIG.AVAILABLE_MODELS.find(m => m.name === modelName);
        if (model && model.id === currentModel) {
            opt.classList.add('active');
        }
    });
}

function toggleModelDropdown() {
    const dropdown = document.getElementById('modelDropdown');
    dropdown.classList.toggle('show');
}

function closeModelDropdown() {
    const dropdown = document.getElementById('modelDropdown');
    dropdown.classList.remove('show');
}

function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'default';
    setTheme(savedTheme);
    
    document.getElementById('themeToggle').addEventListener('click', () => {
        const themes = ['default', 'dark', 'light'];
        const currentIndex = themes.indexOf(theme);
        const nextTheme = themes[(currentIndex + 1) % themes.length];
        setTheme(nextTheme);
    });
}

function setTheme(newTheme) {
    theme = newTheme;
    document.body.className = '';
    
    if (newTheme === 'dark') {
        document.body.classList.add('dark-theme');
        document.getElementById('themeToggle').textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
    } else if (newTheme === 'light') {
        document.body.classList.add('light-theme');
        document.getElementById('themeToggle').textContent = 'üåô –¢–µ–º–Ω–∞—è';
    } else {
        document.getElementById('themeToggle').textContent = 'üåô –¢–µ–º–Ω–∞—è';
    }
    
    localStorage.setItem('theme', newTheme);
}

function initEventListeners() {
    const sendBtn = document.getElementById('sendBtn');
    const messageInput = document.getElementById('messageInput');
    const clearBtn = document.getElementById('clearBtn');
    
    sendBtn.addEventListener('click', sendMessage);
    clearBtn.addEventListener('click', clearHistory);
    
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    if (!messageText || isSending) {
        if (!messageText) {
            showError('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!CONFIG || !CONFIG.OPENAI_API_KEY || CONFIG.OPENAI_API_KEY === 'your-api-key-here') {
        showError('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.js');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage('user', messageText);
    
    messageInput.value = '';
    messageInput.style.height = 'auto';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(true);
    isSending = true;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    sendToGPT(messageText)
        .then(response => {
            addMessage('assistant', response);
            saveHistory();
        })
        .catch(error => {
            showError('–û—à–∏–±–∫–∞: ' + error.message);
        })
        .finally(() => {
            setLoading(false);
            isSending = false;
        });
}

async function sendToGPT(userMessage) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    messageHistory.push({
        role: 'user',
        content: userMessage
    });
    
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        const apiMessages = messageHistory.map(msg => ({
            role: msg.role,
            content: msg.content
        }));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const modelExists = CONFIG.AVAILABLE_MODELS.find(m => m.id === currentModel);
        if (!modelExists) {
            throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ' + currentModel);
        }
        
        const requestBody = {
            model: currentModel,
            messages: apiMessages,
            temperature: 0.7,
            max_tokens: 4096
        };
        
        const response = await fetch(CONFIG.OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${CONFIG.OPENAI_API_KEY}`
            },
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            let errorData = {};
            try {
                errorData = JSON.parse(errorText);
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            }
            
            let errorMessage = '–û—à–∏–±–∫–∞ API';
            
            if (response.status === 401) {
                errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á';
            } else if (response.status === 429) {
                errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.';
            } else if (response.status === 402) {
                errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É API';
            } else if (errorData.error) {
                errorMessage = errorData.error.message || errorData.error.type || errorMessage;
                // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
                if (errorMessage.includes('model') && (errorMessage.includes('not found') || errorMessage.includes('invalid'))) {
                    errorMessage += '. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.';
                }
            }
            throw new Error(errorMessage);
        }
        
        const data = await response.json();
        const assistantMessage = data.choices[0].message.content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messageHistory.push({
            role: 'assistant',
            content: assistantMessage
        });
        
        return assistantMessage;
        
    } catch (error) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        messageHistory.pop();
        throw error;
    }
}

function addMessage(role, content) {
    // –£–±–∏—Ä–∞–µ–º empty state –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const messagesArea = document.getElementById('messagesArea');
    const emptyState = messagesArea.querySelector('.empty-state');
    if (emptyState) {
        emptyState.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = content;
    
    messageDiv.appendChild(contentDiv);
    messagesArea.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    messagesArea.scrollTop = messagesArea.scrollHeight;
}

function setLoading(loading) {
    const sendBtn = document.getElementById('sendBtn');
    if (loading) {
        sendBtn.disabled = true;
        sendBtn.innerHTML = '<div class="loading"></div>';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —á–∞—Ç–µ
        const messagesArea = document.getElementById('messagesArea');
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message assistant';
        loadingDiv.id = 'loadingMessage';
        loadingDiv.innerHTML = '<div class="message-content"><div class="loading"></div> –î—É–º–∞—é...</div>';
        messagesArea.appendChild(loadingDiv);
        messagesArea.scrollTop = messagesArea.scrollHeight;
    } else {
        sendBtn.disabled = false;
        sendBtn.innerHTML = '‚û§';
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingMsg = document.getElementById('loadingMessage');
        if (loadingMsg) {
            loadingMsg.remove();
        }
    }
}

function showError(message) {
    addMessage('assistant', `‚ùå ${message}`);
}

function clearHistory() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?')) {
        messageHistory = [];
        localStorage.removeItem('chatHistory');
        renderMessages();
    }
}

function saveHistory() {
    localStorage.setItem('chatHistory', JSON.stringify(messageHistory));
}

function loadHistory() {
    const saved = localStorage.getItem('chatHistory');
    if (saved) {
        try {
            messageHistory = JSON.parse(saved);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', e);
            messageHistory = [];
        }
    }
}

function renderMessages() {
    const messagesArea = document.getElementById('messagesArea');
    messagesArea.innerHTML = '';
    
    if (messageHistory.length === 0) {
        messagesArea.innerHTML = `
            <div class="empty-state">
                <h2>–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä</h2>
                <p>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ</p>
            </div>
        `;
        return;
    }
    
    messageHistory.forEach(msg => {
        if (typeof msg.content === 'string') {
            addMessage(msg.role, msg.content);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            addMessage(msg.role, msg.content || '');
        }
    });
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    setTimeout(() => {
        messagesArea.scrollTop = messagesArea.scrollHeight;
    }, 100);
}
